{
	// Place your azure-servicebus-with-go workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"err": {
		"description": "Check error and log.Fatalf",
		"scope": "go",
		"prefix": ">err",
		"body": [
			"if err != nil {",
			"\tlog.Fatalf(\"%v\", err)",
			"}"
		]
	},
	"usage":{
		"description": "Usage func body",
		"prefix": ">use",
		"body": [
			"fmt.Println(\"Usage:\")",
			"fmt.Println(\"\\t\" + os.Args[0] + \" send|receive queueName\")",
			"os.Exit(1)"
		]
	},
	"main": {
		"description": "main fn",
		"scope": "go",
		"prefix": ">main",
		"body": [
			"args := os.Args[1:] // exclude program",
			"if len(args) < 1 {",
			"\tusage()",
			"}"
		]
	},
	"switch": {
		"description": "main fn switch",
		"scope": "go",
		"prefix": ">sw",
		"body": [
			"switch args[0] {",
			"case \"send\":",
			"\tsend(args[1:])",
			"case \"receive\":",
			"\treceive(args[1:])",
			"default:",
			"\tusage()",
			"}"
		]
	},
	"read":{
		"description": "Read stdin to byte buf",
		"prefix": ">read",
		"scope": "go",
		"body":[
			"byteBuf, err := ioutil.ReadAll(os.Stdin)",
		]
	},
	"pager": {
		"description": "queuePager",
		"prefix": ">pager",
		"scope": "go",
		"body":[
			"for ${1:pager}.NextPage(context.TODO()) {",
			"\tfor _, item := range ${1:pager}.PageResponse().Items {",
			"\t\t$0",
			"\t}",
			"}",
		]
	}
}